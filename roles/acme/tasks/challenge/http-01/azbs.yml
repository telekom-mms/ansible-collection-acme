---
- name: Validate challenge only if it is created or changed # noqa no-handler
  when: acme_challenge is changed
  block:
    - name: Create challenge file with SAN domain for azure blob storage upload # noqa template-instead-of-copy
      ansible.builtin.copy:
        dest: acme-challenge.{{ item }}
        content: "{{ acme_challenge_data[item]['http-01']['resource_value'] }}"
        mode: "0640"
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined

    - name: Create storage container and upload challenge file to it
      azure.azcollection.azure_rm_storageblob:
        resource_group: "{{ acme_azbs_resource_group }}"
        storage_account_name: "{{ acme_azbs_storage_account_name }}"
        public_access: blob
        container: "{{ acme_azbs_container_name }}"
        blob: "{{ acme_challenge_data[item]['http-01']['resource'] }}"
        src: acme-challenge.{{ item }}
        content_type: text/plain # _type or _encoding have to be set
        subscription_id: "{{ acme_azbs_subscription_id }}"
        client_id: "{{ acme_azbs_client_id }}"
        secret: "{{ acme_azbs_secret }}"
        tenant: "{{ acme_azbs_tenant_id }}"
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined

    # validate certificate
    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      community.crypto.acme_certificate:
        account_key_src: "{{ acme_account_key_path }}"
        account_email: "{{ acme_account_email }}"
        csr: "{{ acme_csr_path }}"
        cert: "{{ acme_cert_path }}"
        fullchain: "{{ acme_fullchain_path }}"
        chain: "{{ acme_intermediate_path }}"
        challenge: http-01
        force: "{{ acme_force_renewal | default(false) }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        terms_agreed: true
        remaining_days: "{{ acme_remaining_days }}"
        data: "{{ acme_challenge }}"

    - name: Remove challenge file for SAN domain from azure blob storage container
      azure.azcollection.azure_rm_storageblob:
        resource_group: "{{ acme_azbs_resource_group }}"
        storage_account_name: "{{ acme_azbs_storage_account_name }}"
        container: "{{ acme_azbs_container_name }}"
        blob: "{{ acme_challenge_data[item]['http-01']['resource'] }}"
        state: absent
        subscription_id: "{{ acme_azbs_subscription_id }}"
        client_id: "{{ acme_azbs_client_id }}"
        secret: "{{ acme_azbs_secret }}"
        tenant: "{{ acme_azbs_tenant_id }}"
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined

    - name: Remove challenge file for SAN domain from fs
      ansible.builtin.file:
        dest: acme-challenge.{{ item }}
        state: absent
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined
