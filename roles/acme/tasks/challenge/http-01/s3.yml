---
- name: Install prerequisites on localhost
  delegate_to: localhost
  ansible.builtin.package:
    name:
      - python-boto3
    state: present
    use: "{{ acme_prerequisites_packagemanager }}"
  when:
    - acme_s3_install_prerequisites | bool

- name: Validate challenge only if it is created or changed # noqa no-handler
  when: acme_challenge is changed
  block:
    - name: Create challenge file with SAN domain for s3 upload # noqa template-instead-of-copy
      ansible.builtin.copy:
        dest: acme-challenge.{{ item }}
        content: "{{ acme_challenge_data[item]['http-01']['resource_value'] }}"
        mode: "0640"
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined

    - name: Upload challenge file for SAN domain to s3 bucket
      amazon.aws.s3_object:
        access_key: "{{ acme_s3_access_key }}"
        secret_key: "{{ acme_s3_secret_key }}"
        bucket: "{{ acme_s3_bucket_name }}"
        object: "{{ acme_challenge_data[item]['http-01']['resource'] }}"
        src: acme-challenge.{{ item }}
        mode: put
        region: "{{ acme_s3_config_region }}"
        permission: public-read
        endpoint_url: "{{ acme_s3_endpoint_url | default(omit) }}"
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined

    # validate certificate
    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      community.crypto.acme_certificate:
        account_key_src: "{{ acme_account_key_path }}"
        account_email: "{{ acme_account_email }}"
        csr: "{{ acme_csr_path }}"
        cert: "{{ acme_cert_path }}"
        fullchain: "{{ acme_fullchain_path }}"
        chain: "{{ acme_intermediate_path }}"
        challenge: http-01
        force: "{{ acme_force_renewal | default(false) }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        terms_agreed: true
        remaining_days: "{{ acme_remaining_days }}"
        data: "{{ acme_challenge }}"

    - name: Remove challenge file for SAN domain from s3 bucket
      amazon.aws.s3_object:
        access_key: "{{ acme_s3_access_key }}"
        secret_key: "{{ acme_s3_secret_key }}"
        bucket: "{{ acme_s3_bucket_name }}"
        object: "{{ acme_challenge_data[item]['http-01']['resource'] }}"
        mode: delobj
        region: "{{ acme_s3_config_region }}"
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined

    - name: Remove challenge file for SAN domain from fs
      ansible.builtin.file:
        dest: acme-challenge.{{ item }}
        state: absent
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined
