---
### include/role 3 - validate challenge
- name: Validate challenge only if it is created or changed
  when: acme_challenge is changed
  block:
    - name: Login to autodns # noqa no-handler
      ansible.builtin.uri:
        url: https://api.autodns.com/v1/login
        method: POST
        body_format: json
        body: { context: "4", user: "{{ acme_dns_user }}", password: "{{ acme_dns_password }}" }
      register: acme_login

    - name: Add a new TXT record to the SAN domains
      ansible.builtin.uri:
        url: https://api.autodns.com/v1/zone/{{ acme_domain.zone }}/a.ns14.net
        method: PATCH
        body_format: json
        body:
          {
            "origin": "{{ item }}",
            "resourceRecordsAdd": [
              {
                # "remove" '*.' from entry when it occurs. without it it would try to create a
                # record like _acme-challenge.*.example.com which is not allowed by AutoDNS
                # see: https://jinja.palletsprojects.com/en/master/templates/#replace
                # and: https://jbmoelker.github.io/jinja-compat-tests/filters/replace/#pattern
                "name": "_acme-challenge.{{ item | replace('*.', '') }}",
                "ttl": 60,
                "type": "TXT",
                "value": "{{ acme_challenge_data[item]['dns-01']['resource_value'] }}"
              }
            ]
          }
        headers:
          Cookie: "{{ acme_login.set_cookie }}"
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined

    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      timeout: "{{ acme_challenge_timeout }}"
      community.crypto.acme_certificate:
        account_key_src: "{{ acme_account_key_path }}"
        account_email: "{{ acme_account_email }}"
        csr: "{{ acme_csr_path }}"
        cert: "{{ acme_cert_path }}"
        fullchain: "{{ acme_fullchain_path }}"
        chain: "{{ acme_intermediate_path }}"
        challenge: dns-01
        force: "{{ acme_force_renewal | default(false) }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        terms_agreed: true
        remaining_days: "{{ acme_remaining_days }}"
        data: "{{ acme_challenge }}"

  always:
    - name: Remove created SAN TXT records to keep DNS zone clean
      ansible.builtin.uri:
        url: https://api.autodns.com/v1/zone/{{ acme_domain.zone }}/a.ns14.net
        method: PATCH
        body_format: json
        body:
          {
            "origin": "{{ item }}",
            "resourceRecordsRem": [
              {
                "name": "_acme-challenge.{{ item | replace('*.', '') }}",
                "ttl": 60,
                "type": "TXT",
                "value": "{{ acme_challenge_data[item]['dns-01']['resource_value'] }}"
              }
            ]
          }
        headers:
          Cookie: "{{ acme_login.set_cookie }}"
      loop: "{{ acme_domain.subject_alt_name }}"
      when:
        - acme_domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - acme_challenge_data[item] is defined
